// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/actions_sdk_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './actions_sdk_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Actions SDK API which allows developers to build projects using the SDK.
 * @class
 * @memberof v2
 */
export class ActionsSdkClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  actionsSdkStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ActionsSdkClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ActionsSdkClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      draftPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/draft'
      ),
      previewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/previews/{preview}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      releaseChannelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/releaseChannels/{release_channel}'
      ),
      sampleProjectPathTemplate: new this._gaxModule.PathTemplate(
        'sampleProjects/{sample_project}'
      ),
      versionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/versions/{version}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listSampleProjects:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'sampleProjects'),
      listReleaseChannels:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'releaseChannels'),
      listVersions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'versions')
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      writeDraft: new this._gaxModule.StreamDescriptor(gax.StreamType.CLIENT_STREAMING),
      writePreview: new this._gaxModule.StreamDescriptor(gax.StreamType.CLIENT_STREAMING),
      createVersion: new this._gaxModule.StreamDescriptor(gax.StreamType.CLIENT_STREAMING),
      readDraft: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
      readVersion: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING)
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.actions.sdk.v2.ActionsSdk', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.actionsSdkStub) {
      return this.actionsSdkStub;
    }

    // Put together the "service stub" for
    // google.actions.sdk.v2.ActionsSdk.
    this.actionsSdkStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.actions.sdk.v2.ActionsSdk') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.actions.sdk.v2.ActionsSdk,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const actionsSdkStubMethods =
        ['writeDraft', 'writePreview', 'createVersion', 'readDraft', 'readVersion', 'encryptSecret', 'decryptSecret', 'listSampleProjects', 'listReleaseChannels', 'listVersions'];
    for (const methodName of actionsSdkStubMethods) {
      const callPromise = this.actionsSdkStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.stream[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.actionsSdkStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'actions.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'actions.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  encryptSecret(
      request: protos.google.actions.sdk.v2.IEncryptSecretRequest,
      options?: CallOptions):
      Promise<[
        protos.google.actions.sdk.v2.IEncryptSecretResponse,
        protos.google.actions.sdk.v2.IEncryptSecretRequest|undefined, {}|undefined
      ]>;
  encryptSecret(
      request: protos.google.actions.sdk.v2.IEncryptSecretRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.actions.sdk.v2.IEncryptSecretResponse,
          protos.google.actions.sdk.v2.IEncryptSecretRequest|null|undefined,
          {}|null|undefined>): void;
  encryptSecret(
      request: protos.google.actions.sdk.v2.IEncryptSecretRequest,
      callback: Callback<
          protos.google.actions.sdk.v2.IEncryptSecretResponse,
          protos.google.actions.sdk.v2.IEncryptSecretRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Encrypts the OAuth client secret used in account linking flows.
 * This can be used to encrypt the client secret for the first time (e.g.
 * before the first push or after changing the client secret) or to re-encrypt
 * a client secret using the latest primary key version (considering key
 * rotation).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.clientSecret
 *   Required. The account linking client secret plaintext.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [EncryptSecretResponse]{@link google.actions.sdk.v2.EncryptSecretResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.encryptSecret(request);
 */
  encryptSecret(
      request: protos.google.actions.sdk.v2.IEncryptSecretRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.actions.sdk.v2.IEncryptSecretResponse,
          protos.google.actions.sdk.v2.IEncryptSecretRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.actions.sdk.v2.IEncryptSecretResponse,
          protos.google.actions.sdk.v2.IEncryptSecretRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.actions.sdk.v2.IEncryptSecretResponse,
        protos.google.actions.sdk.v2.IEncryptSecretRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.encryptSecret(request, options, callback);
  }
  decryptSecret(
      request: protos.google.actions.sdk.v2.IDecryptSecretRequest,
      options?: CallOptions):
      Promise<[
        protos.google.actions.sdk.v2.IDecryptSecretResponse,
        protos.google.actions.sdk.v2.IDecryptSecretRequest|undefined, {}|undefined
      ]>;
  decryptSecret(
      request: protos.google.actions.sdk.v2.IDecryptSecretRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.actions.sdk.v2.IDecryptSecretResponse,
          protos.google.actions.sdk.v2.IDecryptSecretRequest|null|undefined,
          {}|null|undefined>): void;
  decryptSecret(
      request: protos.google.actions.sdk.v2.IDecryptSecretRequest,
      callback: Callback<
          protos.google.actions.sdk.v2.IDecryptSecretResponse,
          protos.google.actions.sdk.v2.IDecryptSecretRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Decrypts the OAuth client secret used in account linking flows.
 * This can be used to view the client secret (e.g. after pulling a project).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {Buffer} request.encryptedClientSecret
 *   Required. The account linking client secret ciphertext.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [DecryptSecretResponse]{@link google.actions.sdk.v2.DecryptSecretResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.decryptSecret(request);
 */
  decryptSecret(
      request: protos.google.actions.sdk.v2.IDecryptSecretRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.actions.sdk.v2.IDecryptSecretResponse,
          protos.google.actions.sdk.v2.IDecryptSecretRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.actions.sdk.v2.IDecryptSecretResponse,
          protos.google.actions.sdk.v2.IDecryptSecretRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.actions.sdk.v2.IDecryptSecretResponse,
        protos.google.actions.sdk.v2.IDecryptSecretRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.decryptSecret(request, options, callback);
  }

  writeDraft(
      options?: CallOptions,
      callback?: Callback<
        protos.google.actions.sdk.v2.IDraft,
        protos.google.actions.sdk.v2.IWriteDraftRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
  writeDraft(
      callback?: Callback<
        protos.google.actions.sdk.v2.IDraft,
        protos.google.actions.sdk.v2.IWriteDraftRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
/**
 * Updates the project draft based on the model.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream} - A writable stream which accepts objects representing
 * [WriteDraftRequest]{@link google.actions.sdk.v2.WriteDraftRequest}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#client-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.writeDraft(callback);
 * stream.write(request);
 * stream.end();
 */
  writeDraft(
      optionsOrCallback?: CallOptions|Callback<
        protos.google.actions.sdk.v2.IDraft,
        protos.google.actions.sdk.v2.IWriteDraftRequest|null|undefined,
        {}|null|undefined>,
      callback?: Callback<
        protos.google.actions.sdk.v2.IDraft,
        protos.google.actions.sdk.v2.IWriteDraftRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    const options = optionsOrCallback as CallOptions;
    this.initialize();
    return this.innerApiCalls.writeDraft(null, options, callback);
  }

  writePreview(
      options?: CallOptions,
      callback?: Callback<
        protos.google.actions.sdk.v2.IPreview,
        protos.google.actions.sdk.v2.IWritePreviewRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
  writePreview(
      callback?: Callback<
        protos.google.actions.sdk.v2.IPreview,
        protos.google.actions.sdk.v2.IWritePreviewRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
/**
 * Updates the user's project preview based on the model.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream} - A writable stream which accepts objects representing
 * [WritePreviewRequest]{@link google.actions.sdk.v2.WritePreviewRequest}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#client-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.writePreview(callback);
 * stream.write(request);
 * stream.end();
 */
  writePreview(
      optionsOrCallback?: CallOptions|Callback<
        protos.google.actions.sdk.v2.IPreview,
        protos.google.actions.sdk.v2.IWritePreviewRequest|null|undefined,
        {}|null|undefined>,
      callback?: Callback<
        protos.google.actions.sdk.v2.IPreview,
        protos.google.actions.sdk.v2.IWritePreviewRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    const options = optionsOrCallback as CallOptions;
    this.initialize();
    return this.innerApiCalls.writePreview(null, options, callback);
  }

  createVersion(
      options?: CallOptions,
      callback?: Callback<
        protos.google.actions.sdk.v2.IVersion,
        protos.google.actions.sdk.v2.ICreateVersionRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
  createVersion(
      callback?: Callback<
        protos.google.actions.sdk.v2.IVersion,
        protos.google.actions.sdk.v2.ICreateVersionRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream;
/**
 * Creates a project version based on the model and triggers deployment to the
 * specified release channel, if specified.
 *
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream} - A writable stream which accepts objects representing
 * [CreateVersionRequest]{@link google.actions.sdk.v2.CreateVersionRequest}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#client-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.createVersion(callback);
 * stream.write(request);
 * stream.end();
 */
  createVersion(
      optionsOrCallback?: CallOptions|Callback<
        protos.google.actions.sdk.v2.IVersion,
        protos.google.actions.sdk.v2.ICreateVersionRequest|null|undefined,
        {}|null|undefined>,
      callback?: Callback<
        protos.google.actions.sdk.v2.IVersion,
        protos.google.actions.sdk.v2.ICreateVersionRequest|null|undefined,
        {}|null|undefined>):
    gax.CancellableStream {
    if (optionsOrCallback instanceof Function && callback === undefined) {
        callback = optionsOrCallback;
        optionsOrCallback = {};
    }
    const options = optionsOrCallback as CallOptions;
    this.initialize();
    return this.innerApiCalls.createVersion(null, options, callback);
  }

/**
 * Reads the entire content of the project draft.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the resource in the format `projects/{project}/draft`. The
 *   `{project}` is the cloud project ID associated with the project.
 * @param {string} [request.clientSecretEncryptionKeyVersion]
 *   Optional. The version of the crypto key used to encrypt the account linking OAuth
 *   client secret. If not specified, the primary key version is used for
 *   encryption. Only relevant for projects with account linking with client
 *   secret.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits [ReadDraftResponse]{@link google.actions.sdk.v2.ReadDraftResponse} on 'data' event.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.readDraft(request);
 * stream.on('data', (response) => { ... });
 * stream.on('end', () => { ... });
 */
  readDraft(
      request?: protos.google.actions.sdk.v2.IReadDraftRequest,
      options?: CallOptions):
    gax.CancellableStream{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.readDraft(request, options);
  }

/**
 * Reads the entire content of a project version.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the version resource in the format
 *   `projects/{project}/versions/{version}`. `{project}` is the
 *   cloud project ID associated with the project, `{version}` is the
 *   identifier of the version being read.
 * @param {string} [request.clientSecretEncryptionKeyVersion]
 *   Optional. The version of the crypto key used to encrypt the account linking OAuth
 *   client secret. If not specified, the primary key version is used for
 *   encryption. Only relevant for projects with account linking with client
 *   secret.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits [ReadVersionResponse]{@link google.actions.sdk.v2.ReadVersionResponse} on 'data' event.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
 *   for more details and examples.
 * @example
 * const stream = client.readVersion(request);
 * stream.on('data', (response) => { ... });
 * stream.on('end', () => { ... });
 */
  readVersion(
      request?: protos.google.actions.sdk.v2.IReadVersionRequest,
      options?: CallOptions):
    gax.CancellableStream{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.readVersion(request, options);
  }

  listSampleProjects(
      request: protos.google.actions.sdk.v2.IListSampleProjectsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.actions.sdk.v2.ISampleProject[],
        protos.google.actions.sdk.v2.IListSampleProjectsRequest|null,
        protos.google.actions.sdk.v2.IListSampleProjectsResponse
      ]>;
  listSampleProjects(
      request: protos.google.actions.sdk.v2.IListSampleProjectsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.actions.sdk.v2.IListSampleProjectsRequest,
          protos.google.actions.sdk.v2.IListSampleProjectsResponse|null|undefined,
          protos.google.actions.sdk.v2.ISampleProject>): void;
  listSampleProjects(
      request: protos.google.actions.sdk.v2.IListSampleProjectsRequest,
      callback: PaginationCallback<
          protos.google.actions.sdk.v2.IListSampleProjectsRequest,
          protos.google.actions.sdk.v2.IListSampleProjectsResponse|null|undefined,
          protos.google.actions.sdk.v2.ISampleProject>): void;
/**
 * Lists all the sample projects supported by the gactions CLI.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of sample projects to return. The service may return
 *   fewer than this value.
 *   If unspecified, at most 1000 sample projects will be returned. Values above
 *   1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous 'ListSampleProjects' call.
 *   Provide this to retrieve the subsequent page.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [SampleProject]{@link google.actions.sdk.v2.SampleProject}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSampleProjectsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSampleProjects(
      request: protos.google.actions.sdk.v2.IListSampleProjectsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.actions.sdk.v2.IListSampleProjectsRequest,
          protos.google.actions.sdk.v2.IListSampleProjectsResponse|null|undefined,
          protos.google.actions.sdk.v2.ISampleProject>,
      callback?: PaginationCallback<
          protos.google.actions.sdk.v2.IListSampleProjectsRequest,
          protos.google.actions.sdk.v2.IListSampleProjectsResponse|null|undefined,
          protos.google.actions.sdk.v2.ISampleProject>):
      Promise<[
        protos.google.actions.sdk.v2.ISampleProject[],
        protos.google.actions.sdk.v2.IListSampleProjectsRequest|null,
        protos.google.actions.sdk.v2.IListSampleProjectsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listSampleProjects(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of sample projects to return. The service may return
 *   fewer than this value.
 *   If unspecified, at most 1000 sample projects will be returned. Values above
 *   1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous 'ListSampleProjects' call.
 *   Provide this to retrieve the subsequent page.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [SampleProject]{@link google.actions.sdk.v2.SampleProject} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSampleProjectsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listSampleProjectsStream(
      request?: protos.google.actions.sdk.v2.IListSampleProjectsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listSampleProjects.createStream(
      this.innerApiCalls.listSampleProjects as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSampleProjects`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of sample projects to return. The service may return
 *   fewer than this value.
 *   If unspecified, at most 1000 sample projects will be returned. Values above
 *   1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous 'ListSampleProjects' call.
 *   Provide this to retrieve the subsequent page.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [SampleProject]{@link google.actions.sdk.v2.SampleProject}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listSampleProjectsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listSampleProjectsAsync(
      request?: protos.google.actions.sdk.v2.IListSampleProjectsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.actions.sdk.v2.ISampleProject>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listSampleProjects.asyncIterate(
      this.innerApiCalls['listSampleProjects'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.actions.sdk.v2.ISampleProject>;
  }
  listReleaseChannels(
      request: protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.actions.sdk.v2.IReleaseChannel[],
        protos.google.actions.sdk.v2.IListReleaseChannelsRequest|null,
        protos.google.actions.sdk.v2.IListReleaseChannelsResponse
      ]>;
  listReleaseChannels(
      request: protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
          protos.google.actions.sdk.v2.IListReleaseChannelsResponse|null|undefined,
          protos.google.actions.sdk.v2.IReleaseChannel>): void;
  listReleaseChannels(
      request: protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
      callback: PaginationCallback<
          protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
          protos.google.actions.sdk.v2.IListReleaseChannelsResponse|null|undefined,
          protos.google.actions.sdk.v2.IReleaseChannel>): void;
/**
 * Lists all release channels and corresponding versions, if any.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the resource in the format `projects/{project}`. The
 *   `{project}` is the cloud project ID associated with the project.
 * @param {number} request.pageSize
 *   The maximum number of release channels to return. The service may return
 *   fewer than this value. If unspecified, at most 50 release channels will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReleaseChannels` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListReleaseChannels`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ReleaseChannel]{@link google.actions.sdk.v2.ReleaseChannel}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listReleaseChannelsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listReleaseChannels(
      request: protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
          protos.google.actions.sdk.v2.IListReleaseChannelsResponse|null|undefined,
          protos.google.actions.sdk.v2.IReleaseChannel>,
      callback?: PaginationCallback<
          protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
          protos.google.actions.sdk.v2.IListReleaseChannelsResponse|null|undefined,
          protos.google.actions.sdk.v2.IReleaseChannel>):
      Promise<[
        protos.google.actions.sdk.v2.IReleaseChannel[],
        protos.google.actions.sdk.v2.IListReleaseChannelsRequest|null,
        protos.google.actions.sdk.v2.IListReleaseChannelsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listReleaseChannels(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the resource in the format `projects/{project}`. The
 *   `{project}` is the cloud project ID associated with the project.
 * @param {number} request.pageSize
 *   The maximum number of release channels to return. The service may return
 *   fewer than this value. If unspecified, at most 50 release channels will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReleaseChannels` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListReleaseChannels`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ReleaseChannel]{@link google.actions.sdk.v2.ReleaseChannel} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listReleaseChannelsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listReleaseChannelsStream(
      request?: protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listReleaseChannels.createStream(
      this.innerApiCalls.listReleaseChannels as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listReleaseChannels`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the resource in the format `projects/{project}`. The
 *   `{project}` is the cloud project ID associated with the project.
 * @param {number} request.pageSize
 *   The maximum number of release channels to return. The service may return
 *   fewer than this value. If unspecified, at most 50 release channels will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListReleaseChannels` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListReleaseChannels`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [ReleaseChannel]{@link google.actions.sdk.v2.ReleaseChannel}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listReleaseChannelsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listReleaseChannelsAsync(
      request?: protos.google.actions.sdk.v2.IListReleaseChannelsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.actions.sdk.v2.IReleaseChannel>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listReleaseChannels.asyncIterate(
      this.innerApiCalls['listReleaseChannels'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.actions.sdk.v2.IReleaseChannel>;
  }
  listVersions(
      request: protos.google.actions.sdk.v2.IListVersionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.actions.sdk.v2.IVersion[],
        protos.google.actions.sdk.v2.IListVersionsRequest|null,
        protos.google.actions.sdk.v2.IListVersionsResponse
      ]>;
  listVersions(
      request: protos.google.actions.sdk.v2.IListVersionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.actions.sdk.v2.IListVersionsRequest,
          protos.google.actions.sdk.v2.IListVersionsResponse|null|undefined,
          protos.google.actions.sdk.v2.IVersion>): void;
  listVersions(
      request: protos.google.actions.sdk.v2.IListVersionsRequest,
      callback: PaginationCallback<
          protos.google.actions.sdk.v2.IListVersionsRequest,
          protos.google.actions.sdk.v2.IListVersionsResponse|null|undefined,
          protos.google.actions.sdk.v2.IVersion>): void;
/**
 * Lists all versions and their current states.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the resource in the format `projects/{project}`. The
 *   `{project}` is the cloud project ID associated with the project.
 * @param {number} request.pageSize
 *   The maximum number of versions to return. The service may return
 *   fewer than this value. If unspecified, at most 50 versions will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListVersions` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListVersions`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Version]{@link google.actions.sdk.v2.Version}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listVersions(
      request: protos.google.actions.sdk.v2.IListVersionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.actions.sdk.v2.IListVersionsRequest,
          protos.google.actions.sdk.v2.IListVersionsResponse|null|undefined,
          protos.google.actions.sdk.v2.IVersion>,
      callback?: PaginationCallback<
          protos.google.actions.sdk.v2.IListVersionsRequest,
          protos.google.actions.sdk.v2.IListVersionsResponse|null|undefined,
          protos.google.actions.sdk.v2.IVersion>):
      Promise<[
        protos.google.actions.sdk.v2.IVersion[],
        protos.google.actions.sdk.v2.IListVersionsRequest|null,
        protos.google.actions.sdk.v2.IListVersionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listVersions(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the resource in the format `projects/{project}`. The
 *   `{project}` is the cloud project ID associated with the project.
 * @param {number} request.pageSize
 *   The maximum number of versions to return. The service may return
 *   fewer than this value. If unspecified, at most 50 versions will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListVersions` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListVersions`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Version]{@link google.actions.sdk.v2.Version} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listVersionsStream(
      request?: protos.google.actions.sdk.v2.IListVersionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listVersions.createStream(
      this.innerApiCalls.listVersions as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listVersions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the resource in the format `projects/{project}`. The
 *   `{project}` is the cloud project ID associated with the project.
 * @param {number} request.pageSize
 *   The maximum number of versions to return. The service may return
 *   fewer than this value. If unspecified, at most 50 versions will be
 *   returned.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListVersions` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListVersions`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Version]{@link google.actions.sdk.v2.Version}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listVersionsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listVersionsAsync(
      request?: protos.google.actions.sdk.v2.IListVersionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.actions.sdk.v2.IVersion>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listVersions.asyncIterate(
      this.innerApiCalls['listVersions'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.actions.sdk.v2.IVersion>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified draft resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  draftPath(project:string) {
    return this.pathTemplates.draftPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Draft resource.
   *
   * @param {string} draftName
   *   A fully-qualified path representing Draft resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDraftName(draftName: string) {
    return this.pathTemplates.draftPathTemplate.match(draftName).project;
  }

  /**
   * Return a fully-qualified preview resource name string.
   *
   * @param {string} project
   * @param {string} preview
   * @returns {string} Resource name string.
   */
  previewPath(project:string,preview:string) {
    return this.pathTemplates.previewPathTemplate.render({
      project: project,
      preview: preview,
    });
  }

  /**
   * Parse the project from Preview resource.
   *
   * @param {string} previewName
   *   A fully-qualified path representing Preview resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPreviewName(previewName: string) {
    return this.pathTemplates.previewPathTemplate.match(previewName).project;
  }

  /**
   * Parse the preview from Preview resource.
   *
   * @param {string} previewName
   *   A fully-qualified path representing Preview resource.
   * @returns {string} A string representing the preview.
   */
  matchPreviewFromPreviewName(previewName: string) {
    return this.pathTemplates.previewPathTemplate.match(previewName).preview;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified releaseChannel resource name string.
   *
   * @param {string} project
   * @param {string} release_channel
   * @returns {string} Resource name string.
   */
  releaseChannelPath(project:string,releaseChannel:string) {
    return this.pathTemplates.releaseChannelPathTemplate.render({
      project: project,
      release_channel: releaseChannel,
    });
  }

  /**
   * Parse the project from ReleaseChannel resource.
   *
   * @param {string} releaseChannelName
   *   A fully-qualified path representing ReleaseChannel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReleaseChannelName(releaseChannelName: string) {
    return this.pathTemplates.releaseChannelPathTemplate.match(releaseChannelName).project;
  }

  /**
   * Parse the release_channel from ReleaseChannel resource.
   *
   * @param {string} releaseChannelName
   *   A fully-qualified path representing ReleaseChannel resource.
   * @returns {string} A string representing the release_channel.
   */
  matchReleaseChannelFromReleaseChannelName(releaseChannelName: string) {
    return this.pathTemplates.releaseChannelPathTemplate.match(releaseChannelName).release_channel;
  }

  /**
   * Return a fully-qualified sampleProject resource name string.
   *
   * @param {string} sample_project
   * @returns {string} Resource name string.
   */
  sampleProjectPath(sampleProject:string) {
    return this.pathTemplates.sampleProjectPathTemplate.render({
      sample_project: sampleProject,
    });
  }

  /**
   * Parse the sample_project from SampleProject resource.
   *
   * @param {string} sampleProjectName
   *   A fully-qualified path representing SampleProject resource.
   * @returns {string} A string representing the sample_project.
   */
  matchSampleProjectFromSampleProjectName(sampleProjectName: string) {
    return this.pathTemplates.sampleProjectPathTemplate.match(sampleProjectName).sample_project;
  }

  /**
   * Return a fully-qualified version resource name string.
   *
   * @param {string} project
   * @param {string} version
   * @returns {string} Resource name string.
   */
  versionPath(project:string,version:string) {
    return this.pathTemplates.versionPathTemplate.render({
      project: project,
      version: version,
    });
  }

  /**
   * Parse the project from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).project;
  }

  /**
   * Parse the version from Version resource.
   *
   * @param {string} versionName
   *   A fully-qualified path representing Version resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromVersionName(versionName: string) {
    return this.pathTemplates.versionPathTemplate.match(versionName).version;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.actionsSdkStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
